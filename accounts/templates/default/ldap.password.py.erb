#!/usr/bin/env python

import sys, getpass, subprocess, optparse

# these modules need to be installed
import ldap
import cracklib


# LDAP parameters
URI = <%= "'#{@ldapuri}'" %>
PARENTDN = <%= @ldapdn ? "'#{@ldapdn}'" : "''" %>


def execute(args, input=None, **kwargs):
    child = subprocess.Popen(args, **kwargs)
    outs = child.communicate(input)
    if child.returncode != 0:
        raise RuntimeError("%s: returned %d" % (' '.join(args), child.returncode))
    return outs


# assumes apg is installed !
def generate(n=1):
    args = ['apg', '-n', str(n)]
    outs = execute(args, stdout=subprocess.PIPE)
    return outs[0].strip()


def check(passwd):
    result = cracklib.FascistCheck(passwd)
    if result:
        raise ValueError(result)


def ldap_connect(binddn, passwd):
    conn = ldap.initialize(URI)
    conn.start_tls_s()
    conn.bind_s(binddn, passwd, ldap.AUTH_SIMPLE)
    return conn


def main(argv):
    parser = optparse.OptionParser()
    parser.add_option("-u", "--uid",
                      help="user uid [defaults to current user]")
    opts, args = parser.parse_args(argv)
    
    # default to the current user
    uid = opts.uid
    if not uid:
        uid = getpass.getuser()
    
    # if we are not given a DN, try to figure it out
    dn = PARENTDN
    if not dn:
        conn = ldap_connect('', '')
        attrs = conn.search_s('', ldap.SCOPE_BASE, '(objectClass=*)', ['+'])
        basedn = attrs[0][1]['namingContexts'][0]
        users = conn.search_s(basedn, ldap.SCOPE_SUBTREE, '(objectclass=posixAccount)')
        for user in users:
            suffix = user[0].split(',', 1)[1]
            if not dn:
                dn = suffix
            elif suffix != dn:
                raise ValueError('Inconsistent user DN %s' % suffix)
        conn.unbind_s()
        
    binddn = ','.join(['uid=%s' % uid, dn])
    
    try:
        # get the current password
        curpasswd = getpass.getpass('Current Password: ')
        
        # connect to LDAP
        conn = ldap_connect(binddn, curpasswd)
    
        # get the new password
        newpasswd = curpasswd
        while True:
            passwd = getpass.getpass('New Password: ')
            try:
                check(passwd)
            except ValueError, e:
                sys.stderr.write('Error: %s\n' % e.args[0])
                sys.stderr.write('Try something like: %s\n' % generate())
            else:
                newpasswd = passwd
                break
    except KeyboardInterrupt:
        sys.exit(1)
    
    # modify the password
    conn.passwd_s(binddn, curpasswd, newpasswd)
    
    conn.unbind_s()

if __name__ == '__main__':
    main(sys.argv)
